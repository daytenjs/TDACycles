% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/reduce_cycle.R
\name{reduce_cycle}
\alias{reduce_cycle}
\title{Algorithm that returns a data.frame of the ordered}
\usage{
reduce_cycle(ordered_cycle, og_ix, cycle_birth)
}
\arguments{
\item{ordered_cycle}{Must be only data coordinates (i.e., "x", "y", "z")
in a sequential (adjacent) order.}

\item{og_ix}{The index of the cycle being passed.}

\item{cycle_birth}{Birth epsilon of original cycle.}
}
\value{
A data.frame identified by the original cycle index it is defined upon.
It shows the steps taken to reduce a given cycle by either shrinking a representative cycle
by an edge that cuts off a triangle from the original cycle, or by splitting a cycle
into two cycles with 4 or more points per cycle (they will share an edge), and giving then a
new index \code{ix}. It tracks hierarchy/order by \code{pix}, tells you whether a given step
for a given cycle caused a split, lists the points in the new cycle, the epsilon
(regarding the Rips Complex) at which value the shrink/split occured, and whether or not
this moved caused the death of the homological class (whether this new cycle is just a triangle).
}
\description{
Algorithm that returns a data.frame of the ordered
}
\examples{
require(dplyr)

rr <- ripsgen(n = 60)
diagram <- rr$diagram
ordered_cycles <- cycle_extract(
  diagram = rr$diagram,
  cycle_segments = rr$cycle_segments
)

cyc_edge_count <- ordered_cycles \%>\%
  group_by(cycle_ix) \%>\%
  tally()
og_ix <- cyc_edge_count[which.max(cyc_edge_count$n), "cycle_ix"][[1]]

ordered_cycle <- ordered_cycles \%>\% filter(cycle_ix == og_ix)
cycle_birth <- diagram[og_ix, "Birth"]
max_iter <- 10

reduced_mat <- reduce_cycle(ordered_cycle, og_ix, cycle_birth[[1]])

plot_cycle(data = rr$data, ordered_cycles = reduced_mat \%>\% select(ix, x, y))



### You can also animate the reduction
par(mar = c(4.5, 4.5, 2.5, 1.5))
plot(rr$data, xlab = "x", ylab = "y", main = "Sample (Rudimentary) Animation")
for (i in 1:23) {
  plot_cycle(
    rr$data,
    reduced_mat \%>\%
      filter(ix == i) \%>\%
      select(ix, x, y),
    plot_data = FALSE
  )
  if (i < 7) {
    Sys.sleep(1.3)
  } else {
    Sys.sleep(0.4)
  }
}
plot_cycle(rr$data, reduced_mat \%>\% filter(ix == 1) \%>\% select(ix, x, y), plot_data = FALSE)

}
